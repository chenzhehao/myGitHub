<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.myself.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    
	<!-- Realm实现 -->
	<bean id="userRealm" class="com.myself.shiro.UserRealm">
		<property name="sqlSession" ref="sqlSession" />
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
	</bean>

	<!-- 会话ID生成器 用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成。-->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话Cookie模板 -->
	<!-- sessionIdCookie是sessionManager创建会话Cookie的模板： 
		sessionIdCookie.name：设置Cookie名字，默认为JSESSIONID； 
		sessionIdCookie.domain：设置Cookie的域名，默认空，即当前访问的域名； 
		sessionIdCookie.path：设置Cookie的路径，默认空，即存储在域名根下； 
		sessionIdCookie.maxAge：设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie； 
		sessionIdCookie.httpOnly：如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly 
		cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持； sessionManager.sessionIdCookieEnabled：是否启用/禁用Session 
		Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session 
		Id -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="180000" />
	</bean>

	<!-- 会话验证调度器 
		Shiro提供了会话验证调度器，用于定期的验证会话是否已过期，如果过期将停止会话；
		出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；
		但是如在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，
		Shiro提供了会话验证调度器SessionValidationScheduler来做这件事情。
	-->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- sessionValidationScheduler.interval：设置调度时间间隔，单位毫秒，默认就是1小时；
			 sessionValidationScheduler.sessionManager：设置会话验证调度器进行会话验证时的会话管理器； -->
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- 会话监听器用于监听会话创建、过期及停止事件 -->
	<bean id="mySessionListener01" class="com.myself.shiro.MySessionListener01">
	</bean>
	
	<!-- 用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理 
		sessionManager.globalSessionTimeout：设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期；
		sessionManager.sessionValidationSchedulerEnabled：是否开启会话验证器，默认是开启的；
		sessionManager.sessionValidationScheduler：设置会话验证调度器，默认就是使用
	-->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000" /><!-- 回话超时时间 -->
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" /><!-- 是否开启会话验证器，默认是开启的； -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" /><!-- 设置会话验证调度器，默认就是使用 -->
		<property name="sessionDAO" ref="sessionDAO" /><!-- 会话存储/持久化 -->
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" /><!-- 会话Cookie模板 -->
		<property name="sessionListeners"><!-- 会话监听器 -->
			<list><ref bean="mySessionListener01"/></list>
		</property> 
	</bean>
	
	<!-- 缓存管理器 使用Ehcache实现,用于管理缓存的，此处使用Ehcache实现；
		cacheManager.cacheManagerConfigFile：设置ehcache缓存的配置文件；-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:config/shiro/ehcache.xml"/>
    </bean>
    
    <!-- 会话DAO 会话存储/持久化 -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" /><!-- 设置Session缓存名字，默认就是shiro-activeSessionCache -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator" /><!-- 会话ID生成器 -->
	</bean>
	
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="cacheManager"/><!-- 缓存管理器 -->
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="usernameTest" />
		<property name="passwordParam" value="passwordTest" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/index.jsp" />
	</bean>

	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filters">
			<map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/index.jsp = anon
				/unauthorized.jsp = anon
				/login.jsp = authc
				/logout = logout
				/transactionTest = anon
				/JTATest = anon
				/JTATest2 = anon
				/** = user
			</value>
		</property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>